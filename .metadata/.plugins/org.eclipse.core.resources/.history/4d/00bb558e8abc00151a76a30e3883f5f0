import java.util.ArrayList;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class Dictionary {
	
	public static ArrayList<Variable> vars = new ArrayList<Variable>();
	public static ArrayList<Function> funcs = new ArrayList<Function>();
	private static char[] symbols = {'(', ')', '{', '}', '=', '+', '-', '*', '/', '"', '\''};
	
	public Dictionary() {
		super();
	}
	
	//Check if valid name
	public static boolean isName(String name) {
		char[] toks = name.toCharArray();
		for (char tok : toks) {
			for (char symbol : symbols) {
				if (tok == symbol || (Character.isDigit(toks[0])) == true) {
					return false;
				}
			}
		}
		return true;
	}
	
	//Check if existing variable
	public static boolean isVariable (String name) {
		for (final Variable var : vars) {
            if (var.getName().equals(name)) {
                return true;
            }
		}
		return false;
	}
	
	//Check if existing function
	public static boolean isFunction (String name) {
		for (final Function func : vars) {
            if (func.getName().equals(name)) {
                return true;
            }
		}
		return false;
	}
	
	//Check if valid parameter list
	public boolean isParameter(String name) {
		char[] toks = name.toCharArray();
		if (toks[0] != '(' || toks[toks.length-1] != ')') {
			return false;
		}
		return true;
	}
	
	//Lex raw value, loop through the lexed value, replace all variables with their value, reconcatenate and evaluate
	public static String reparseVar(String value) throws ScriptException {
		for (Variable var : vars) {
			if (var.getName().compareTo(value.substring(0, value.length()-1)) == 0) {
				value = var.getValue().toString()+"~";
			}
		}
		boolean hasVar = true;
		ArrayList<String> tokens = relexVar(value);
		while (hasVar) {
			boolean varExists = true;
			while (varExists) {
				int i = 0;
				for (String tok : tokens) {
					for (Variable var : getVars()) {
						if (tokens.contains(var.getName())) {
							tokens.set(tokens.indexOf(var.getName()), (String) var.getValue());
						} else { i+= 1; }
					}
				}
				if (i >= (tokens.size()*getVars().size())) { varExists = false; }
			}
			String reparsed = "";
			for (String tok : tokens) {
				reparsed += tok;
			}
			//System.out.println("STRING: " + tokens);
			boolean exists = false;
			for (Variable var : getVars()) {
				if (relexVar(reparsed).contains(var.getName())) {
					exists = true;
				}
			} if (!exists) { hasVar = false; }
			tokens = relexVar(reparsed+"~");
		}
		String reparsed = "";
		for (String tok : tokens) {
			reparsed += tok;
		}
		return reparsed;
	}
	
	private static ArrayList<String> relexVar (String value) {
		char[] toklist = value.toCharArray();
		ArrayList<String> tokens = new ArrayList<String>();
		String toks = "";
		for (char tok : toklist) {
			if (tok == '+' || tok == '-' || tok == '/' || tok == '*') {
				tokens.add(toks.replace(" ", ""));
				toks = "";
				toks += tok;
				tokens.add(toks.replace(" ", ""));
				toks = "";
			} else if (tok == '~') {
				if (toks != "") { tokens.add(toks.replace(" ", "")); toks = ""; }
			} else {
				toks += tok;
			}
		}
		return tokens;
	}
	
	//returns the index of the variable with a given name
	public static int findVariable(String name) {
		for (int i=0; i<vars.size(); i++) {
			if (vars.get(i).getName().compareTo(name) == 0) {
				return i;
			}
		}
		return -1;
	}
	
	public String toString() {
		return "Variables: " + vars + "\nFunctions: " + funcs;
	}
}
